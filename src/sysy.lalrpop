use sysy_compiler::ast::*;

grammar;

match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {}, // Multi line comment
  // r"/\*([^*]|\*+[^/])*\*/" => {}, // Wrong version (but I don't know why)
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(<>),
  <var_decl: VarDecl> => Decl::VarDecl(<>),
}

ConstDecl: ConstDecl = {
  "const" <b_type: BType> <first_const_def: ConstDef> <mut const_def_list: ("," <ConstDef>)*> ";" => {
    const_def_list.insert(0, first_const_def);
    for const_def in &mut const_def_list {
      const_def.b_type = b_type;
    }
    ConstDecl { const_def_list }
  }
}

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = {
  <ident: Ident> "=" <const_init_val: ConstInitVal> => ConstDef { b_type: BType::Int, ident: ident, const_init_val: Box::new(const_init_val)},
}

ConstInitVal: ConstInitVal = <const_exp: ConstExp> => ConstInitVal { const_exp: Box::new(const_exp) };

VarDecl: VarDecl = {
  <b_type: BType> <first_var_def: VarDef> <mut var_def_list: ("," <VarDef>)*> ";" => {
    var_def_list.insert(0, first_var_def);
    for var_def in &mut var_def_list {
      var_def.b_type = b_type;
    }
    VarDecl { var_def_list }
  }
}

VarDef: VarDef = {
  <ident: Ident> => VarDef{ b_type: BType::Int, ident: ident, init_val: Box::new(None) },
  <ident: Ident> "=" <init_val: InitVal> => VarDef { b_type: BType::Int, ident: ident, init_val: Box::new(Some(init_val)) },
}

InitVal: InitVal = <exp: Exp> => InitVal { exp: Box::new(exp) };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <block_item_list: (BlockItem)*> "}" => Block { <> };

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(<>),
  <stmt: Stmt> => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
  <open_stmt: OpenStmt> => Stmt::OpenStmt(<>),
  <closed_stmt: ClosedStmt> => Stmt::ClosedStmt(<>),
}

OpenStmt: OpenStmt = {
  "if" "(" <exp: Exp> ")" <stmt: Stmt> => OpenStmt::If(Box::new(exp), Box::new(stmt)),
  "if" "(" <exp: Exp> ")" <then_stmt: ClosedStmt> "else" <else_stmt: OpenStmt> => OpenStmt::IfElse(Box::new(exp), Box::new(then_stmt), Box::new(else_stmt)),
}

ClosedStmt: ClosedStmt = {
  <simple_stmt: SimpleStmt> => ClosedStmt::SimpleStmt(<>),
  "if" "(" <exp: Exp> ")" <then_stmt: ClosedStmt> "else" <else_stmt: ClosedStmt> => ClosedStmt::IfElse(Box::new(exp), Box::new(then_stmt), Box::new(else_stmt)),
}

SimpleStmt: SimpleStmt = {
  <l_val: LVal> "=" <exp: Exp> ";" => SimpleStmt::Assign(l_val, Box::new(exp)),
  <exp: Exp?> ";" => SimpleStmt::Exp(Box::new(exp)),
  <block: Block> => SimpleStmt::Block(Box::new(block)),
  "return" <exp: Exp?> ";" => SimpleStmt::Return(Box::new(exp)),
}

Exp: Exp = <l_or_exp: LOrExp> => Exp { <> };

LVal: LVal = <ident: Ident> => LVal { <> };

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
  <l_val: LVal> => PrimaryExp::LVal(<>),
  <number: Number> => PrimaryExp::Number(<>),
}

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(<>),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryExp(unary_op, Box::new(unary_exp)) ,
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
}

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(<>),
  <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::Mul(Box::new(mul_exp), Box::new(unary_exp)),
  <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::Div(Box::new(mul_exp), Box::new(unary_exp)),
  <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::Mod(Box::new(mul_exp), Box::new(unary_exp)),
}

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(<>),
  <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::Add(Box::new(add_exp), Box::new(mul_exp)),
  <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::Sub(Box::new(add_exp), Box::new(mul_exp)),
}

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(<>),
  <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::Lt(Box::new(rel_exp), Box::new(add_exp)),
  <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::Gt(Box::new(rel_exp), Box::new(add_exp)),
  <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::Le(Box::new(rel_exp), Box::new(add_exp)),
  <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::Ge(Box::new(rel_exp), Box::new(add_exp)),
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(<>),
  <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::Eq(Box::new(eq_exp), Box::new(rel_exp)),
  <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::Ne(Box::new(eq_exp), Box::new(rel_exp)),
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(<>),
  <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::And(Box::new(l_and_exp), Box::new(eq_exp)),
}

LOrExp: LOrExp = {
  <l_and_exp: LAndExp> => LOrExp::LAndExp(<>),
  <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::Or(Box::new(l_or_exp), Box::new(l_and_exp)),
}

ConstExp: ConstExp = <exp: Exp> => ConstExp { exp: Box::new(exp) };

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
